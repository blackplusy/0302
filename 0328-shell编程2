shell02
1.awk 线性的文本处理工具：
	可以在文本数据进行字段分割和重组
	默认是以空格或者连续的空格作为分割符号
	a.获取本机的IP地址
	ifconfig eth0 |grep Bcast |awk -F " " '{print $2}'|awk -F ":" '{print $2}'
	b.打印所有行
		awk '{ print } ' /etc/passwd
	c.打印第一列
		查看系统中有哪些用户
		awk -F ":" '{ print $1 }' /etc/passwd
	d.打印多列
		 awk -F ":" '{ print $1,$3}' /etc/passwd
		 awk -F ":" '{ print $1":"$3 }' /etc/passwd
	e.把所有通过ssh登录失败记录中的IP打印出来
		lastb -i |grep ssh |awk '{print $3}' |grep -v Wed|uniq -c
		uniq -c  去重计算数量
		lastb -i 登录失败信息
	f.打印每行的最后一列
		$NF 最后一列
		awk -F ":" '{ print $NF }' /etc/passwd
		/bin/bash  		用户可以登录对系统进行操作
		/sbin/nologin   用户可以在系统中运行程序，但是不能登录
	g.打印每行的字段数(每行有多少个列)
		awk -F ":" '{ print NF }' /etc/passwd
		NF 列的数量
	h.运算操作符号
		+
		-
		* 
		/
		%
		^
		++
		--
		echo |awk '{print 2^3}'
	i.awk的关系操作符
		==
		!=
		>=
		<=
		>
		<
	j.逻辑操作符
		&&  逻辑与  真&&真==真
		||  逻辑或  假||假==假
		！  逻辑非
	k.打印行号
		awk -F ":" '{ print NR,$1 }' /etc/passwd
		awk -F ":" 'NR==8{print}' /etc/passwd
		知识点
			简单的条件判断
			NR代表行号
			原理：
			虽然打印的是第八行，但是前7行，awk一样读取，只是没有打印
		打印字段数量大于3的行	
			必须要指定分割符号，列数才有意义，NF(列数)
			awk -F ":" 'NF>3{print}' test
		打印uid在30-40之间的用户名
			awk -F ":" '$3>=30&&$3<=40{print}' /etc/passwd
		隔行删除(隔行打印)
			awk 'NR%2==0{print }' /etc/passwd


a.终端设置

1.当前用户为  	xxx
2.当前IP为   	xxx
3.当前主机名为 	xxx
	
b.系统情况报告
1.cpu用户使用率超过80%(vmstat us对应数据)
2.内存使用率超过80%(free)
3.硬盘使用率超过80%(df)
4.超过极限在所有终端报警(wall)


=============================
awk -F ":" 'BEGIN{ 处理文件前的代码块 }{ 处理文件过程中执行的代码块 }END{ 处理文件后执行的代码}' /etc/passwd

a.输出顶部增加“come on baby”，输出最后添加“get out of my face”
	 awk -F ":" 'BEGIN{ print "come on baby" }{ print }END{ print "et out "}' test

b.打印最后一行的最后一列
	awk -F ":" 'END { print $NF }' /etc/passwd

c.打印文件所有字段总数
	awk -F ":" 'BEGIN{ count=0 }{count+=NF}END{ print count }' /etc/passwd

d.打印字段数大于4的总行数
	awk -F ":" 'BEGIN{ count=0 }NF>4{ count++ }END{ print count }' /etc/passwd

e.awk代码写入到独立的文件中
	01.awk
	BEGIN{
	        FS=":"
	        count=0
	}
	{
	        if( NF>4 )
	        {
	                count++
	        }
	}
	END{
	        print count
	}
	awk -f 01.awk /etc/passwd
f.awk函数调用
	awk 有很多的内置函数
		print("参数")    打印完毕后会自动换行
		printf(参数列表)  格式化，定义格式，转义等
			printf（"%d--%s\n",12,'name'）
		 echo "we are fml "|awk '{printf("%d--%s\n",12,"simida")}'

f.awk的循环
	for (i=0;i<10;i++){
		printf("%d",i)
	}
	02.awk
	{
        for(i=0;i<5;i++)
        {
                printf("%d",i)
        }
	}
	END{
	        #print("over")
	        printf("%s","\n")
	}
	echo | awk -f 02.awk

g.倒序排列所有字段
test.txt

1:2:3:4
a:b:c:d:e:f

处理之后
4:3:2:1
f:e:d:c:b:a
	03.awk
	BEGIN {
	        FS=":"
	}
	{
	        for(i=NF;i>0;i--)
	        {
	                if( i>1 ){
	                        printf("%s:",$i)
	                }
	                else{
	                        printf("%s\n",$i)
	                }
	        }
	}
	awk -f 03.awk ./test.txt

==========================================================
sed   字段编辑和字段替换
1.删除指令d
	删除所有行  				sed -e 'd' /etc/passwd
	只删除第一行 				sed -e '1d' /etc/passwd
	删除1到3行           	sed -e '1,3d' /etc/passwd
	删除第1行和第3行      	sed -e '1d;3d' /etc/passwd

	包含root关键字的行都删除  sed -e '/root/d' /etc/passwd
	删除daemon开头的所有行    sed -e '/^daemon/d' /etc/passwd
	删除一nologin结尾的行     sed -e '/nologin$/d' passwd
	删除所有空行              sed -e '/^$/d' passwd
	删除所有已#开头以及空行    sed -e '/^#/d;/^$/d' passwd
	删除以daemon开头的行到以shudown结尾的行
		sed -e '/^daemon/,/shutdown$/d' passwd

2.直接保存结果到源文件中
	sed -i '/^#/d' passwd

3.打印
	打印所有行     		sed -n -e 'p' passwd
	打印第一行和第三行    sed -n -e '1p;3p' passwd
	打印以root开头的行   sed -n -e '/^root/p' passwd
	打印以nologin结尾的行 sed -n -e '/nologin$/p' passwd

4.替换
	把每行找到的第一个root关键字替换为admin
		sed -e 's/root/admin/' passwd
	把每行找到所有的o关键字替换为admin
		sed -e 's/o/admin/g' passwd
	替换1-3行进行替换
		sed -e '1,3s/:/-/g' passwd		
5.使用域的方式进行定位
	echo "03-23-2020" |awk -F "-" '{print $3"-"$1"-"$2}'
	echo "03-23-2020"| sed -r 's/(..)-(..)-(....)/\3-\1-\2/'
	echo "come on, baby"|sed -r 's/(.*),(.*)/\2,\1/g'
	删除每行的第二个字符
	cat /etc/fstab |sed -r 's/(.)(.)(.*)/\1\3/'
	删除最后一个字符
	echo "can you see me?" | sed -r 's/(.*)(.)/\1/'

==================================================================
a.OSI参考模型(7层)
	物联网传话表应用
	物理层   	设备的比特流传输  		网卡
	数据链路层   mac地址进行媒介访问  		交换机
	网络层       提供逻辑寻址        		路由器
	传输层       提供可靠和不可靠的传输   TCP/UDP
	会话层       对应会话的管理和同步     操作系统、应用读取
	表示层       数据的表现形式，加密等等 ASCII、JPEG
	应用层       数据接口                http、telnet
b.TCP/IP 4层参考模型
	网络接口层(物理层、数据链路层)
	互联网层
	传输层
	引用层(应用、表示、会话)
c.OSI和TCP/IP区别
	相同点
		都是以协议栈为基础
		彼此之间协议独立
		下层为上层提供服务
	不同点
		osi是先有模型，tcp/ip是现有协议后有模型
		osi适用于各种协议，tcp/ip适用于tcp/ip网络
		层次数量不一样
d.传输层协议
TCP (传输控制协议)
	面向连接的服务
		建立连接、在传输数据，再断开
		数据在传输中不包含目的地址
		保证数据传输的可靠性
UDP(用户数据报协议)
	面向无连接的服务
		不需要事先建立连接
		每个保温带有完整的目的地址
		不保证数据传输的可靠性
e.tcp连接的3次握手和tcp断开连接的4次握手
	tcp连接的3次握手
		1.主机a发送同步信号给主机b，我能和你通信么？
		2.主机b发送同意信号给主机a，同时发送同步信号给主机b。你可以和我同步，我可以和你同步么？
		3.主机a发送同意信号给主机b
	tcp断开连接的4次握手
		1.主机a发送信号给主机b。我要结束连接
		2.主机b发送给主机a，当然可以
		3.主机b发送信号给主机a，终止
		4.主机a发送信号给主机b，终止
f.IP地址
	IP(网络间的协议)
	IP地址通常是32位的二进制数字，被分为4组8个2进制数字
	192.168.7.44     IP地址  
	255.255.255.0    子网掩码
	192.168.7.255    广播地址(不能用)
	192.168.7.0      网络号(不能用)
	IP地址类型
	A类：10.0.0.0-10.255.255.255
	B类：172.16.0.0-172.31.255.255
	C类：192.168.0.0-192.168.255.255
	IP地址的计算方法
	1.将IP地址转换为二进制
	2.将二进制进行与运算，得到网络地址(2个1才是1)
	1100 0000 . 1010 1000 . 0000 0111 . 0010 1100   IP
	1111 1111   1111 1111   1111 1110   0000 0000   NETMASK
	-------------------------------------------------------
	1100 0000   1010 1000   0000 0110   0000 0000   
	192         .168         .6           .0         



	




