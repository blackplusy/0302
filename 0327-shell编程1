shell脚本
	把需要的命令保存到文本中，然后执行
a.脚本分类
	bash shell
	cshell
	kshell
b.脚本文件执行方式
	./文件名    需要文件有执行权限
	bash 文件名 不需要文件有执行权限
c.shell脚本组成
	若干命令+脚本基本格式+特定语法=shell脚本
d.完整格式脚本
	shell脚本通常以.sh结尾
	#!/bin/bash   --脚本第一行使用#!(魔法字节)制定脚本代码执行的程序
	echo 'im 21'
	hostname
	d1.标准脚本执行方法（魔法字节制定的程序会生效）
		chmod 755 ./02.sh  给脚本执行权限
		./02.sh
		或者
		 /root/02.sh
	d2.非标准的执行方法(不建议)(魔法字节制定程序不会运行)
		. ./02.sh
		或者
		source ./02.sh
		或者
		bash   ./02.sh
		或者
		sh     ./02.sh
e.脚本的应用场景
	把重复、复杂的工作通过把命令写成脚本，以后仅仅需要执行脚本就可以完成工作
f.如何学习脚本
	1.尽可能记住更多命令
	2.掌握脚本的标准格式
		执行魔法字节和使用保准执行方式运行脚本
	3.掌握脚本的基本语法
		变量定义
		条件判断
		分支语句
		函数
		数组
		传参数
		正则表达式
		sed、awk命令使用
g.变量的定义
	默认情况下shell里面定义变量是不区分类型的，可以给变量赋予任何类型的值
		a=123
		a='zone'
	定义变量时候=左右边不能有空格
		a =123   X
		a= 123   X
		a = 123  X
h.变量的分类
	环境变量
	用来影响程序执行过程或者执行结果的，一般环境变量习惯大写进行命名
	查看当前终端(shell)下有哪些已经定义了的环境变量
		env
	定义环境变量
	临时改变某个中段环境变量的执行
		export PATH=$PATH:/root/mongodb/bin
	系统变量
	shell本身已经固定好了名字和作用
	$1,$2.......$@,$*......
	!$   上一次操作的最后一个参数
	$1   文件后的第一个参数
	$2   文件后的第二个参数
i.什么时候使用变量
	如果某个内容使用多次，代码中重复出现，可以使用变量代表内容，修改的时候仅仅需要修改变量的值
	代码运行过车各种可能会把某些命令执行结果保存出来，后续代码需要使用这些结果，就可以直接使用这个变量
j.变量的赋值
	a=123
	b='help me!!!'
	使用变量保存命令的执行结果``
	 kernel=`uname -s`
	 反引号可以把引号中命令先执行，取出结果，把结果赋值给变量
	 kernel2=$(uname -s)
	双引号是弱引号，引号内的变量可以正常使用
	单引号是强引号，引号里的所有内容都当做普通字符串

k.简单的四则运算
	算数运算
	默认情况下，shell只能支持简单的整数运算
	= - * / %(取模，余数)
	a=1
	let "a+=1"   a=a+1
	let "b=a+3"
	等同于 b=`expr $a+3`
	推荐使用
		b=$(( a+3 ))
	计算命令 bc
		 echo "scale=5;1/4" |bc
		 	scale：小数点后保留几位
		例子1：通过bc命令实现一个计算器
		例子2：使用shell原生支持的算术运算写一个计算器，能够支持
		+ - * / 等整数运算

l.条件判断
	test命令 可以通过man test查看条件判断的语法
	条件判断脚本可以用 if 关键字
	语法结构
	--------------
	if [ 判断条件 ];then
		命令
	fi
	--------------
	if [ 判断条件 ];then
		命令
	else
		命令
	fi
	--------------

	if [ 判断条件 ];then
		命令
	elif [ 判断条件 ];then
		命令
	else
		命令
	fi

	-------------
	if [ 判断条件 ];then
		命令
		if [ 判断条件 ];then
			命令
		fi
	else
		if [ 判断条件 ];then
			命令
		fi
	fi
	------------
	必须掌握条件判断参数
		-f   文件存在并且是普通文件
			test -f  /etc/inittab   条件成立，返回码$?=0
			test -f /etc/           条件不成立，返回码非0
			[ -f /etc/inittab ]
			[ -f /etc/ ]
		-d   文件存在并且是目录
		-e 	 不管是文件还是目录，只要存在条件就成立
		-n   只要字符串非空就是成立
		-z   字符串长度为0，就成立
		！   结果取反
		字符串的对比： = ，！= 不能用于数值大小的判断
		数值的判断 -eq(相等)，-ne（不等），-lt(小于)，-le(小于等于)，-gt(大于)，-ge(大于等于)
		逻辑判断符号  -a (与，and)-o（或，or）
			[ 条件1 -a 条件2 ] 只有两个条件都成立，整个大条件才成立
			[ 条件1 -o 条件2 ] 只要其中一个条件成立，整个大条件成立
			







